import telebot
import os
import json
import pandas as pd
import threading
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7415306603:AAH_8HD2is4BR84yKVpAI5qKIJ-pT7MHLaQ'
bot = telebot.TeleBot(API_TOKEN)

# –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –∏ —Ñ–∞–π–ª–∞–º
EXCEL_FILE_DIR   = 'tables'
EXCEL_FILE_PATH  = os.path.join(EXCEL_FILE_DIR, 'uploaded_data.xlsx')
DATE_FILE_PATH   = os.path.join(EXCEL_FILE_DIR, 'date.txt')
AUTH_FILE_PATH   = os.path.join(EXCEL_FILE_DIR, 'authorized_users.json')

# –°–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–∞—Ä–æ–ª–µ–π –∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤
USER_PASSWORDS = {
    "Accountant": {"password": "123", "alias": "Accountant"},
    "–ö–î–ï":       {"password": "208", "alias": "–ö–î–ï"},
    "–©–ü–Æ":      {"password": "210", "alias": "–©–ü–Æ"},
    "–ü–ê–ù":      {"password": "212", "alias": "–ü–ê–ù"},
    "–°–ö–ù":      {"password": "204", "alias": "–°–ö–ù"},
    "–ò–ú–í":      {"password": "207", "alias": "–ò–ú–í"},
    "–°–ù–í":      {"password": "158", "alias": "–°–ù–í"},
    "–°–¶–î–°":     {"password": "441", "alias": "–°–¶–î–°"},
    "–°–ê–í":      {"password": "748", "alias": "–°–ê–í"},
    "–≠–û":       {"password": "283", "alias": "–≠–û"},
    "–ë–ê–ï":      {"password": "301", "alias": "–ë–ê–ï"},
    "–í–ï–í":      {"password": "302", "alias": "–í–ï–í"},
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–º–Ω–æ–≥–æ—à–∞–≥–æ–≤–∫–∏)
user_states = {}

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
def load_authorized_users():
    if not os.path.exists(AUTH_FILE_PATH):
        return {u: [] for u in USER_PASSWORDS}
    with open(AUTH_FILE_PATH, 'r', encoding='utf-8') as f:
        data = json.load(f)
    for u in USER_PASSWORDS:
        data.setdefault(u, [])
    return data

def save_authorized_users(data):
    if not os.path.exists(EXCEL_FILE_DIR):
        os.makedirs(EXCEL_FILE_DIR)
    with open(AUTH_FILE_PATH, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

authorized_users = load_authorized_users()

# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–∞–ø–∫—É
if not os.path.exists(EXCEL_FILE_DIR):
    os.makedirs(EXCEL_FILE_DIR)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def send_temp_message(chat_id, text, delay=43200):
    msg = bot.send_message(chat_id, text)
    threading.Thread(
        target=delete_message_after_delay,
        args=(chat_id, msg.message_id, delay),
        daemon=True
    ).start()

def delete_message_after_delay(chat_id, message_id, delay):
    time.sleep(delay)
    try:
        bot.delete_message(chat_id, message_id)
    except:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—É –Ω–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å
    if message.chat.id in authorized_users.get("Accountant", []):
        # –ü—Ä–æ—Å—Ç–æ —à–ª—ë–º –µ–º—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–∑—É
        send_user_data(message.chat.id, "Accountant")
    else:
        user_states.pop(message.chat.id, None)
        send_temp_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
@bot.message_handler(func=lambda m: True)
def check_password(message):
    state = user_states.get(message.chat.id, {})
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –¥–∞—Ç—É –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ
    if state.get('awaiting_date'):
        handle_date_input(message)
        return
    if state.get('awaiting_comment'):
        handle_comment_input(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    user = next((u for u,c in USER_PASSWORDS.items() if message.text == c['password']), None)
    if not user:
        send_temp_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        return

    # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    user_states[message.chat.id] = {'user': user}
    if message.chat.id not in authorized_users[user]:
        authorized_users[user].append(message.chat.id)
        save_authorized_users(authorized_users)

    send_temp_message(message.chat.id, f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user}!")

    # –ï—Å–ª–∏ –Ω–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä ‚Äî —Å—Ä–∞–∑—É —à–ª—ë–º –¥–∞–Ω–Ω—ã–µ
    if user != "Accountant":
        send_user_data(message.chat.id, user)

# –ü—Ä–∏—ë–º Excel –æ—Ç –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞
@bot.message_handler(content_types=['document'])
def handle_document(message):
    # –¢–æ–ª—å–∫–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä
    if message.chat.id not in authorized_users.get("Accountant", []):
        send_temp_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    try:
        # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        if os.path.exists(EXCEL_FILE_PATH): os.remove(EXCEL_FILE_PATH)
        if os.path.exists(DATE_FILE_PATH): os.remove(DATE_FILE_PATH)

        file_info = bot.get_file(message.document.file_id)
        downloaded = bot.download_file(file_info.file_path)
        with open(EXCEL_FILE_PATH, 'wb') as f:
            f.write(downloaded)

        user_states[message.chat.id]['awaiting_date'] = True
        send_temp_message(message.chat.id,
            "‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á—ë—Ç–∞ (DD.MM.YYYY):"
        )
    except Exception as e:
        send_temp_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –æ—Ç—á—ë—Ç–∞
def handle_date_input(message):
    if message.chat.id not in authorized_users.get("Accountant", []) or \
       not user_states.get(message.chat.id, {}).get('awaiting_date'):
        send_temp_message(message.chat.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
        return

    date = message.text.strip()
    with open(DATE_FILE_PATH, 'w', encoding='utf-8') as f:
        f.write(date)

    user_states[message.chat.id]['awaiting_date'] = False
    send_temp_message(message.chat.id, f"üóìÔ∏è –î–∞—Ç–∞ {date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –í—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

    # === –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫—Ä–æ–º–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞) ===
    for role, ids in authorized_users.items():
        if role == "Accountant":
            continue
        for cid in ids:
            send_temp_message(cid,
                f"üì¢ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä –æ–±–Ω–æ–≤–∏–ª —Ç–∞–±–ª–∏—Ü—É –∑–∞ {date}.\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å ‚Äî –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:"
            )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏ (—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ)
    for role in authorized_users:
        if role != "Accountant":
            authorized_users[role].clear()
    save_authorized_users(authorized_users)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_user_data(chat_id, user_key):
    alias = USER_PASSWORDS[user_key]['alias']
    # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—É –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
    if user_key == "Accountant":
        if os.path.exists(EXCEL_FILE_PATH):
            with open(EXCEL_FILE_PATH, 'rb') as f:
                bot.send_document(chat_id, f)
        return

    # –î–ª—è –ö–î–ï –ø–æ–ª–Ω—ã–π, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî —Ñ–∏–ª—å—Ç—Ä
    if user_key == "–ö–î–ï":
        with open(EXCEL_FILE_PATH, 'rb') as f:
            bot.send_document(chat_id, f)
    else:
        filtered = filter_excel_data_for_user(EXCEL_FILE_PATH, alias)
        with open(filtered, 'rb') as f:
            bot.send_document(chat_id, f)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π
    date = open(DATE_FILE_PATH).read().strip() if os.path.exists(DATE_FILE_PATH) else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
    send_temp_message(chat_id, f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞ {date} –¥–ª—è {alias}.")

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='confirm_all'),
        telebot.types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ...', callback_data='confirm_except'),
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è Excel
def filter_excel_data_for_user(file_path, alias):
    df = pd.read_excel(file_path)
    if alias != '–ö–î–ï':
        for col in ['+', '-']:
            if col in df.columns:
                df.drop(columns=[col], inplace=True)
    df_filtered = df[df['–†–£–ö-–õ–¨'] == alias]
    out = os.path.join(EXCEL_FILE_DIR, f"filtered_{alias}.xlsx")
    df_filtered.to_excel(out, index=False)
    return out

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda c: c.data.startswith('confirm_'))
def confirm_data(call):
    action = call.data
    user_key = user_states.get(call.message.chat.id, {}).get('user')

    if action == 'confirm_all':
        send_temp_message(call.message.chat.id, 'üëç –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.')
        # === –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞ ===
        for cid in authorized_users.get("Accountant", []):
            send_temp_message(cid, f"{user_key} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª(–∞) –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.")
    else:  # confirm_except
        user_states[call.message.chat.id]['awaiting_comment'] = True
        send_temp_message(call.message.chat.id, 'üìù –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ:')

def handle_comment_input(message):
    if not user_states.get(message.chat.id, {}).get('awaiting_comment'):
        return
    comment = message.text.strip()
    user_key = user_states[message.chat.id]['user']

    send_temp_message(message.chat.id, 'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω.')
    for cid in authorized_users.get("Accountant", []):
        send_temp_message(cid, f"{user_key} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª(–∞): {comment}")

    user_states[message.chat.id]['awaiting_comment'] = False

if __name__ == '__main__':
    bot.infinity_polling()
